{"version":3,"sources":["pages/NameList/NameList.js","pages/ScrollPicker/ScrollPicker.js","pages/PicList/PicList.js","pages/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["NameList","state","names","namesStr","this","map","name","react_default","a","createElement","className","key","Component","ScrollPicker","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","options","isTouchable","window","elContainer","React","createRef","addHandlingFuncs","removeHandlingFuncs","ref","ev","changedTouches","touches","console","log","cancelable","stopPropagation","getTouchInfo","$el","current","addEventListener","handleStart","bind","handleMove","handleEnd","handleCancel","removeEventListener","handleWheel","PicList","picSrc","demoImgs","src","_id","pics","student","alt","pages_ScrollPicker_ScrollPicker","Main","pages_PicList_PicList","pages_NameList_NameList","App","pages_Main_Main","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0bc0ac80.chunk.js","sourcesContent":["\nimport React, { Component } from 'react'\n\nimport './NameList.scss'\n\nclass NameList extends Component {\n    state = {\n        names : ['Yossi', 'Gabi', 'Nitta', 'Roy', 'Sami', 'Ofer', 'Candy']\n    }\n    render() {\n        const names = this.state.names\n        var namesStr = names.map(name => {\n            return (\n                <li className=\"name-container\" key={name}>\n                    <h1> {name} </h1>\n                </li>\n            )\n        })\n        return (\n            <section className=\"name-list\">\n                <ul>\n                    {namesStr}\n                </ul>\n            </section>\n        )\n    }\n}\n\nexport default NameList\n","\nimport React, { Component } from 'react'\n\nimport './ScrollPicker.scss'\n\nclass ScrollPicker extends Component {\n    constructor(props) {\n        super(props)\n        this.options = props.options\n        this.isTouchable = typeof window !== 'undefined' && 'ontouchstart' in window;\n        this.elContainer = React.createRef()\n    }\n    \n    componentDidMount() {\n       this.addHandlingFuncs()\n    }\n    componentWillUnmount() {\n        this.removeHandlingFuncs()\n    }\n    \n\n    render() {\n        return (\n            <section ref= {this.elContainer}>\n                {this.options}\n            </section>\n        )\n    }\n    \n    \n    getTouchInfo(ev) {\n        return this.isTouchable? ev.changedTouches[0] || ev.touches[0] : ev;\n    }\n\n    handleStart(ev) {\n        console.log(ev)\n        if (ev.cancelable) {\n            // ev.preventDefault();\n            ev.stopPropagation();\n        }\n        const touchInfo = this.getTouchInfo(ev);\n\n    }\n    handleEnd(ev) {\n        console.log('END touch')\n    }\n    handleMove(ev) {\n        console.log('am moving touch')\n    }\n    handleCancel(ev) {\n        console.log('canceling touch')\n    }\n\n    handleClick(ev) {\n        console.log('moving up or down by one')\n    }\n\n    handleWheel(ev) {\n        console.log('i am currently supporting only touchScreens')\n    }\n\n\n\n\n\n\n\n\n\n\n\n    \n\n    addHandlingFuncs() {\n        var $el = this.elContainer.current\n        if (this.isTouchable) {\n            $el.addEventListener('touchstart', this.handleStart.bind(this));\n            $el.addEventListener('touchmove', this.handleMove.bind(this));\n            $el.addEventListener('touchend', this.handleEnd.bind(this));\n            $el.addEventListener('touchcancel', this.handleCancel.bind(this));\n        } else {\n            console.log('i am, untouchable untouchable')\n            // $el.addEventListener('mousewheel', this.handleWheel.bind(this));\n            // $el.addEventListener('wheel', this.handleWheel).bind(this); // for IE\n            // $el.addEventListener('mousedown', this.handleStart).bind(this);\n            // $el.addEventListener('mousemove', this.handleMove).bind(this);\n            // $el.addEventListener('mouseup', this.handleEnd).bind(this);\n            // $el.addEventListener('mouseleave', this.handleCancel).bind(this);\n        }\n    }\n    removeHandlingFuncs() {\n        var $el = this.elContainer.current\n        if (this.isTouchable) {\n            this.$el.removeEventListener('touchstart', this.handleStart);\n            this.$el.removeEventListener('touchmove', this.handleMove);\n            this.$el.removeEventListener('touchend', this.handleEnd);\n            this.$el.removeEventListener('touchcancel', this.handleCancel);\n        } else {\n            this.$el.removeEventListener('mousewheel', this.handleWheel);\n            this.$el.removeEventListener('wheel', this.handleWheel); // for IE\n            this.$el.removeEventListener('mousedown', this.handleStart);\n            this.$el.removeEventListener('mousemove', this.handleMove);\n            this.$el.removeEventListener('mouseup', this.handleEnd);\n            this.$el.removeEventListener('mouseleave', this.handleCancel);\n        }\n    }\n}\n\nexport default ScrollPicker\n","\nimport React, { Component } from 'react'\nimport ScrollPicker from '../ScrollPicker'\nimport './PicList.scss'\n\nclass PicList extends Component {\n\n    picSrc = 'http://nfic-2016.ieeesiliconvalley.org/wp-content/uploads/sites/17/2017/03/Generic-Person-Image.jpg'\n    demoImgs = [\n        { name: 'Yossi', src: this.picSrc, _id: 1 },\n        { name: 'Gabi', src: this.picSrc, _id: 2 },\n        { name: 'Nitta', src: this.picSrc, _id: 3 },\n        { name: 'Roy', src: this.picSrc, _id: 4 },\n        { name: 'Sami', src: this.picSrc, _id: 5 },\n        { name: 'Ofer', src: this.picSrc, _id: 6 },\n        { name: 'Candy', src: this.picSrc, _id: 7 },\n    ]\n\n    render() {\n        var pics = this.demoImgs.map((student) => {\n            return (\n                <div className=\"student-container\" key={student._id}>\n                    <button className=\"hint\">{student.name}</button>\n                    <img src={student.src} alt=\"\" />\n                </div>\n            )\n        })\n        return (\n            <section className=\"pics-list\">\n                <ScrollPicker options={pics} />\n            </section>\n        )\n    }\n}\n\nexport default PicList\n","\nimport React, { Component } from 'react'\nimport NameList from '../NameList'\nimport PicList from '../PicList'\nimport './Main.scss'\n\nclass Main extends Component {\n\n    render() {\n        return (\n            <main className=\"main-container\">\n                <PicList/>\n                <NameList />\n            </main>\n        )\n    }\n}\n\nexport default Main\n","import React, { Component } from 'react';\nimport './App.css';\nimport MainPage from './pages/Main'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <MainPage/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';   \nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}